[project]
name = "rr"
version = "0.1.0"
description = "CrateDB Kubernetes Cluster Manager with Temporal workflows"
readme = "README.md"
requires-python = ">=3.12"
authors = [{ name = "CrateDB Team", email = "support@crate.io" }]
keywords = ["cratedb", "kubernetes", "temporal", "cluster-management"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "click>=8.1.0",
    "kubernetes>=28.0.0",
    "loguru>=0.7.0",
    "rich>=13.7.0",
    "pydantic>=2.5.0",
    "tenacity>=8.2.0",
    "tqdm>=4.66.0",
    "temporalio>=1.5.0",
    "tabulate>=0.9.0",
    "PyYAML>=6.0.1",
    "python-dateutil>=2.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.8",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "types-PyYAML>=6.0.12",
    "types-tabulate>=0.9.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
]
testing = [
    "pytest-xdist>=3.4.0",
    "pytest-benchmark>=4.0.0",
    "coverage[toml]>=7.3.0",
]

[project.urls]
Homepage = "https://github.com/crate/rr"
Documentation = "https://github.com/crate/rr#readme"
Repository = "https://github.com/crate/rr.git"
Issues = "https://github.com/crate/rr/issues"
Changelog = "https://github.com/crate/rr/releases"

[project.scripts]
rr = "rr.cli:cli"
rr-worker = "rr.worker:run_worker"

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["rr"]

[tool.hatch.build.targets.sdist]
include = ["/rr", "/tests", "/README.md", "/pyproject.toml"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "ruff>=0.1.8",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "types-PyYAML>=6.0.12",
    "types-tabulate>=0.9.0",
]

[tool.ruff]
line-length = 120
target-version = "py312"
src = ["rr", "tests"]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "N",   # pep8-naming
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "S",   # flake8-bandit
    "T20", # flake8-print
    "PIE", # flake8-pie
    "SIM", # flake8-simplify
]
ignore = [
    "E501",    # line too long, handled by ruff format
    "S101",    # use of assert detected
    "S603",    # subprocess call with shell=True
    "S607",    # starting a process with a partial executable path
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "COM812",  # trailing comma missing (conflicts with formatter)
    "ISC001",  # implicitly concatenated string literals (conflicts with formatter)
]

[tool.ruff.lint.isort]
known-first-party = ["rr"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "S105", "S106"]
"rr/cli.py" = ["T20"]                           # Allow print statements in CLI

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
strict_concatenate = true
check_untyped_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_reexport = true
show_error_codes = true
show_column_numbers = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "kubernetes.*",
    "temporalio.*",
    "tenacity.*",
    "tqdm.*",
    "tabulate.*",
    "rich.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
    "--tb=short",
    "-ra",
]
testpaths = ["tests"]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["rr"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]                          # Skip assert_used test

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/tests.py"]
